package com.example.controller;

import java.util.HashMap;
import java.util.Map;

import com.example.model.request.UserRequest;
import com.example.service.UtenteService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.example.constants.ValidationConstants;
import com.example.entity.User;
import com.example.model.response.GenericResponse;
import com.example.repository.validation.Validator;

@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UtenteService utenteService;

  @Autowired
  private Validator validation;
  
  //GET con il GetMapping
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return utenteService.findAll();
  }

  //POST con il passaggio di parametri
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email) {
     // @ResponseBody means the returned String is the response, not a view name
     // @RequestParam means it is a parameter from the GET or POST request
     utenteService.save(name, email);
     return "Saved";
  }

  //Post con il passaggio di una request
  @PostMapping(path="/add2") // Map ONLY POST Requests
  public @ResponseBody String addNewUser2 (final @RequestBody User request) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  
     utenteService.save(request);
     return "Saved";
  }

   @PutMapping(path="/{id}/update") // Map ONLY POST Requests
   public @ResponseBody ResponseEntity<String> updateEmail (final @PathVariable Integer id, @RequestParam String email) {
      // @ResponseBody means the returned String is the response, not a view name
      // @RequestParam means it is a parameter from the GET or POST request

      try {
         utenteService.update(id, email);
      } catch (RuntimeException e) {
         return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
      }

      return new ResponseEntity<>("Aggiornato con successo", HttpStatus.OK);
   }
  
  @DeleteMapping(path="/delete") // Map ONLY POST Requests
  public @ResponseBody String delete (final @RequestParam Integer id) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

     utenteService.delete(id);
    return "Saved";
  }

  @PostMapping(path="/add3") // Map ONLY POST Requests
  public ResponseEntity<GenericResponse> addNewUser3 (final @RequestBody UserRequest request) {
	GenericResponse response = new GenericResponse();
	Map<String, String> mappaErrori = new HashMap<String, String>();
	
	validation.checkRequest(request, mappaErrori);
	
	if (!mappaErrori.isEmpty()) {
		response.setMappaErrori(mappaErrori);
		response.setEsitoElaborazione(ValidationConstants.KO);
		return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
	}
	
	try {
      utenteService.save(request);
	} catch (Exception e) {
		return new ResponseEntity<GenericResponse>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

	   return new ResponseEntity<GenericResponse>(response, HttpStatus.OK);
  }

}